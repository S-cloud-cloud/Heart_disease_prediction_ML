R_sum(3)
SI<-function(P,Ti,R=0.05){
S_interest=P*Ti*R;
print(S_interest)
}
SI(1000,5)
R_decimal_to_binary<-function(decimal){
if(decimal==0){
return("0")
}else if(decimal==1){
return("1")
}else{
reminder<-decimal %% 2
quotient<- decimal %/% 2
binary_part<-R_decimal_to_binary(quotient)
return(paste(binary_part,reminder,sep= ""))
}
}
decimal_no <- 5
binary_result<-R_decimal_to_binary(decimal_no)
cat(paste("decimal ",decimal_no," in binary is : ",binary_result))
R_factorial<-function(x){
if(x==0)
return(1)
else
return(x*R_factorial(x-1))
}
R_factorial(5)
9 sum of square series:
#9 sum of square series:
sum_sq<-function(N){
if(N==1){
return(1)
}else{
return(N*N+sum_sq(N-1))
}
}
sum_sq(3)
operations<-function(a,b,c,d,e){
sum(a,b,c,d,e)
avg = (sum)/5;
#IN BUILT FUNCTION sd EXISTS TO FIND STANDARD DEVIATION:
x<-c(a,b,c,d,e)
sd(x)
}
operations(1,2,3,4,5)
operations<-function(a,b,c,d,e){
s= sum(a,b,c,d,e)
s
avg = (sum)/5;
avg
#IN BUILT FUNCTION sd EXISTS TO FIND STANDARD DEVIATION:
x<-c(a,b,c,d,e)
sd(x)
}
operations(1,2,3,4,5)
s
operations<-function(a,b,c,d,e){
s= sum(a,b,c,d,e)
print(s)
avg = (sum)/5;
print(avg)
#IN BUILT FUNCTION sd EXISTS TO FIND STANDARD DEVIATION:
x<-c(a,b,c,d,e)
sd(x)
print(sd)
}
operations(1,2,3,4,5)
s= sum(a,b,c,d,e)
operations<-function(a,b,c,d,e){
s= sum(a,b,c,d,e)
print(s)
avg = (s)/5;
print(avg)
#IN BUILT FUNCTION sd EXISTS TO FIND STANDARD DEVIATION:
x<-c(a,b,c,d,e)
sd(x)
print(sd)
}
operations(1,2,3,4,5)
operations<-function(a,b,c,d,e){
s= sum(a,b,c,d,e)
print(s)
avg = (s)/5;
print(avg)
#IN BUILT FUNCTION sd EXISTS TO FIND STANDARD DEVIATION:
x<-c(a,b,c,d,e)
sd(x)
}
operations(1,2,3,4,5)
list1=c(1,2,3,4,5,6)
mean(list1)
median(list1)
var(list1)
sd(list1)
scale(list1)
summary(list1)
rank(list1)
quantile(list1)
#11:generate a set of nos and run them in built-in functions:
list1=c(1,2,3,4,5,6)
mean(list1)
median(list1)
var(list1)
sd(list1)
scale(list1)
summary(list1)
rank(list1)
quantile(list1)
leapyear_check<-function(year){
y=year
if(y%%4==0){
leap<-y
}
if(y%%100==0 && y%%400!=0){
exception<-y
}
if(leap==y && exception!=y){
print(paste("input is a leap year"))
}
else{
print(paste("input is not a leap year"))
}}
leapyear_check(2016)
leapyear_check<-function(year){
y=year
exception=0
leap=0
if(y%%4==0){
leap<-y
}
if(y%%100==0 && y%%400!=0){
exception<-y
}
if(leap==y && exception!=y){
print(paste("input is a leap year"))
}
else{
print(paste("input is not a leap year"))
}
}
leapyear_check(2016)
ispalindrome<-function(number){
num_str<-as.character(number)
return(num_str==rev(strsplit(num_str,'')[[1]]))
}
num<-as.numeric(readline(prompt = "enter a 3 digit no: "))
if(ispalindrome(num)){
cat(num,"is a palindrome \n")
}else{
cat(num ,"is not a palindrome \n")
}
ispalindrome<-function(number){
num_str<-as.character(number)
if(num_str==rev(strsplit(num_str,'')[[1]])){
print(num_str,paste("   is a palindrome \n"))
}else{
print(num_str,paste("  is not a palindrome \n "))
}
}
num<-as.numeric(readline(prompt = "enter a 3 digit no: "))
ispalindrome<-function(number){
num_str<-as.character(number)
if(num_str==rev(strsplit(num_str,'')[[1]])){
print(num_str,paste("   is a palindrome \n"))
}else{
print(num_str,paste("  is not a palindrome \n "))
}
}
num<-as.numeric(readline(prompt = "enter a 3 digit no: "))
ispalindrome(num)
ispalindrome<-function(number){
num_str<-as.character(number)
return(num_str==paste0(rev(strsplit(num_str,'')[[1]]),collapse=''))
}
num<-as.numeric(readline(prompt = "enter a 3 digit no: "))
cat(num,"is a palindrome")
}else{
ispalindrome<-function(number){
num_str<-as.character(number)
return(num_str==paste0(rev(strsplit(num_str,'')[[1]]),collapse=''))
}
num<-as.numeric(readline(prompt = "enter a 3 digit no: "))
if(ispalindrome(num)){
cat(num,"is a palindrome")
}else{
cat(num ,"is not a palindrome \n")
}
eapyear_check<-function(year){
y=year
exception=0
leap=0
if(y%%4==0){
leap<-y
}
if(y%%100==0 && y%%400!=0){
exception<-y
}
if(leap==y && exception!=y){
print(paste("input is a leap year"))
}
else{
print(paste("input is not a leap year"))
}
}
leapyear_check(2016)
ispalindrome<-function(number){
num_str<-as.character(number)
return(num_str==paste0(rev(strsplit(num_str,'')[[1]]),collapse=''))
}
num<-as.numeric(readline(prompt = "enter a 3 digit no: "))
cat(num,"is a palindrome")
}else{
ispalindrome<-function(number){
num_str<-as.character(number)
return(num_str==paste0(rev(strsplit(num_str,'')[[1]]),collapse=''))
}
num<-as.numeric(readline(prompt = "enter a 3 digit no: "))
if(ispalindrome(num)){
cat(num,"is a palindrome")
}else{
cat(num ,"is not a palindrome \n")
}
mark1<-as.numeric(readline(prompt="mark1 ?"))
mark2<-as.numeric(readline(prompt="mark2 ?"))
mark3<-as.numeric(readline(prompt="mark3 ?"))
total_mark=sum(mark1,mark2,mark3)
avg=total_mark/3
if(avg>=90){
paste("grade : O ")
}else if(avg<=89 && avg>=80){
paste("grade : E")
}else if(avg<=79 && avg>=70){
paste("grade : A")
}else if(avg<=69 && avg>=60){
paste("grade : B")
}else if(avg<=59 && avg>=50){
paste("grade : C")
}else if(avg<=49 && avg>=40){
paste("grade : D")
}else if(avg<=39){
if(avg>=35){
paste("just passed")
}else{
paste("failed")
}
}else{
printf("enter a valid marks / error")
}
a=c()
print(a)
a=append(a,10)
print(a)
a=c()
print(a)
a=c('sravan','bobby','rohith','gnnaesh','gajji')
print(a)
vec = c(1, 2, 3 , 4)
print("Sum of the vector:")
print(sum(vec))
print("Mean of the vector:")
print(mean(vec))
print("Product of the vector:")
print(prod(vec))
a = c(2, 4, 8, 11)
b = c(73, 8, 2, 90)
print("vector a ")
a
print("vector b ")
b
print("Elements of vector a that are not in vector b are:")
ans = setdiff(a, b)
print(ans)
lst1 = list(sample(1 : 10, size = 5, replace = F))
print(lst1)
#6
lt=list(10:20)
arr=array(unlist(lt),dim=c(3,3,3))
print(arr)
# Given String
var<- "hi i am shambhavi"
# Using nchar() function:
result<- nchar(var)
print(result)
str1<-"\n hello let's learn to count no of words in a string :) "
print("\n original str :!")
str1
print("\n total no of words in it :^) ")
splited<-strsplit(str1," ")
#find the no of splits performed: sapply()
sapply(split,length)
str1<-"\n hello let's learn to count no of words in a string :) "
print("\n original str :!")
str1
print("\n total no of words in it :^) ")
splited<-strsplit(str1," ")
#find the no of splits performed: sapply()
sapply(splited,length)
a=c()
print(a)
a=append(a,121)
print(a)
a=c()
print(a)
a=c('me','i','u','us','whatif')
print(a)
a=c()
print(a)
a=c('me','i','u','us','whatif')
print(a)
vec = c( 2, 3 , 4,5)
print("Sum of the vector:")
print(sum(vec))
print("Mean of the vector:")
print(mean(vec))
print("Product of the vector:")
print(prod(vec))
#3.
a = c(2, 4, 8, 11)
b = c(73, 8, 2, 90)
print("vector a ")
a
print("vector b ")
b
print("Elements of vector a that are not in vector b are:")
ans = setdiff(a, b)
print(ans)
#4
lst1 = list(sample(1 : 15, size = 5, replace = F))
print(lst1)
lt=list(10:20)
arr=array(unlist(lt),dim=c(3,3,3))
print(arr)
var<- "hi i am shambhavi"
# Using nchar() function:
#counts including white spaces
result<- nchar(var)
print(result)
str1<-"\n hello let's learn to count no of words in a string :) "
print("\n original str :!")
str1
print("\n total no of words in it :^) ")
splited<-strsplit(str1," ")
#find the no of splits performed: sapply()
sapply(splited,length)
m = matrix(c(1, 22, 3, 19, 14, 17, 12, 18, 7), nrow = 3)
print("input matrix:")
print(m)
max = which(m == max(m), arr.ind = TRUE)
print(paste("Maximum value: ", m[max]))
print(max)
min = which(m == min(m), arr.ind = TRUE)
print(paste("Minimum value: ", m[min]))
print(min)
fac1 <- as.factor(c(1:5))
print ("Factor1 : ")
print (fac1)
sapply(fac1,class)
fac2 <- as.factor(c(8:10))
print ("Factor2 : ")
print (fac2)
sapply(fac2,class)
# combine into one factor
combined <- unlist(list(fac1,fac2))
print ("Combined Factor : ")
print (combined)
sapply(combined,class)
names=c("bobby","sravan","ojaswi")
age=c(20,22,16)
address=c("kakumanu","kakumanu","hyderabad")
marks=c(89,98,90)
a=data.frame(names,age)
b=data.frame(address,marks)
print(a)
print(b)
num     = as.integer(readline(prompt = "Enter a number: "))
isPrime = 0
if (num > 1) {
isPrime = 1
for (i in 2: (num - 1)) {
if ((num %% i) == 0) {
isPrime = 0
break
}
}
}
num     = as.integer(readline(prompt = "Enter a number: "))
isPrime = 0
if (num > 1) {
isPrime = 1
for (i in 2: (num - 1)) {
if ((num %% i) == 0) {
isPrime = 0
break
}
}
}
if (num == 2) isPrime = 1
if (isPrime == 1) {
print(paste(num, "is a prime number"))
} else {
print(paste(num, "is not a prime number"))
}
# Install required packages
install.packages(c("dplyr", "ggplot2", "forcats", "rsample", "tidyverse", "tidymodels", "gridExtra", "pROC"))
# Load libraries
library(dplyr)
library(ggplot2)
library(forcats)
library(rsample)
library(tidyverse)
library(tidymodels)
library(gridExtra)
library(pROC)
print(getwd())
setwd("C:/Users/KIIT/OneDrive/Desktop/codes/R_PROJECT/heart_disease")
print(getwd())
cleveland <- read.csv("processed.cleveland.data", header = FALSE, fileEncoding = "UTF-8")
glimpse(cleveland)
# Data tidying
names <- c("age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal", "heart_disease")
colnames(cleveland) <- names
cleveland <- cleveland %>%
mutate(sex = case_when(sex == 0 ~ "female", sex == 1 ~ "male")) %>%
mutate(cp = case_when(cp == 1 ~ "typical angina", cp == 2 ~ "atypical angina", cp == 3 ~ "non-anginal pain", cp == 4 ~ "asymptomatic")) %>%
mutate(fbs = case_when(fbs == 1 ~ "high", fbs == 0 ~ "low")) %>%
mutate(exang = case_when(exang == 0 ~ "no", exang == 1 ~ "yes")) %>%
mutate(heart_disease = case_when(heart_disease == 0 ~ "absence", TRUE ~ "presence"))
cleveland <- cleveland %>%
mutate(across(c(sex, cp, fbs, exang, heart_disease), as.factor))
cleveland <- cleveland %>%
select(age, sex, cp, trestbps, chol, fbs, thalach, exang, heart_disease) %>%
rename("max_hr" = "thalach", "exercise_angina" = "exang") %>%
drop_na()
glimpse(cleveland)
# Exploratory Analysis
age.plot <- ggplot(cleveland, aes(x = age, fill = heart_disease)) +
geom_histogram() +
facet_wrap(vars(heart_disease)) +
labs(title = "Prevalence of Heart Disease Across Age", x = "Age (years)", y = "Count", fill = "Heart Disease")
cp.plot <- ggplot(cleveland, aes(x = heart_disease, fill = cp)) +
geom_bar(position = "dodge") +
labs(title = "Prevalence of Heart Disease for Different Chest Pain Types", x = "Heart Disease", y = "Count", fill = "Chest Pain Type")
sex.plot <- ggplot(cleveland, aes(x = sex, fill = heart_disease)) +
geom_bar(position = "fill") +
labs(x = "Sex", y = "Proportion", fill = "Heart Disease")
fbs.plot <- ggplot(cleveland, aes(x = fbs, fill = heart_disease)) +
geom_bar(position = "fill") +
labs(x = "Fasting Blood Sugar", y = "Proportion", fill = "Heart Disease") +
scale_x_discrete(labels = c("low", "high"))
exang.plot <- ggplot(cleveland, aes(x = exercise_angina, fill = heart_disease)) +
geom_bar(position = "fill") +
labs(x = "Exercise Induced Angina", y = "Proportion", fill = "Heart Disease")
grid.arrange(sex.plot, fbs.plot, exang.plot, nrow = 2)
# Cholesterol and Blood Pressure
trestbps.plot <- ggplot(cleveland, aes(x = trestbps, y = heart_disease)) +
geom_boxplot() +
labs(x = "Resting Blood Pressure (mm Hg)", y = "Heart Disease")
chol.plot <- ggplot(cleveland, aes(x = chol, y = heart_disease)) +
geom_boxplot() +
labs(x = "Serum Cholesterol (mg/dl)", y = "Heart Disease")
maxhr.plot <- ggplot(cleveland, aes(x = max_hr, y = heart_disease)) +
geom_boxplot() +
labs(x = "Maximum Heart Rate (bpm)", y = "Heart Disease")
grid.arrange(trestbps.plot, chol.plot, maxhr.plot, nrow = 2)
# Data splitting for training and testing (75% & 25% respectively)
heart.split <- initial_split(cleveland)
heart.train <- training(heart.split)
heart.test <- testing(heart.split)
# Logistic Regression model using all 8 predictors
heart.full <- glm(heart_disease ~ ., data = heart.train, family = "binomial")
summary(heart.full)
# Logistic regression model with age, fasting blood sugar, and cholesterol removed
heart_model <- logistic_reg() %>%
set_engine("glm")
heart_recipe <- recipe(heart_disease ~ ., data = heart.train) %>%
step_rm(fbs, age, chol) %>%
step_zv(all_predictors())
heart_wflow <- workflow() %>%
add_model(heart_model) %>%
add_recipe(heart_recipe)
heart_fit <- heart_wflow %>%
fit(data = heart.train)
tidy(heart_fit)
# Receiver Operating Characteristic Technique (ROC)
heart.train.pred <- predict(heart_fit, new_data = heart.train)
traincomp <- data.frame(heart.train$heart_disease, heart.train.pred)
colnames(traincomp) <- c("train.response", "train.prediction")
traincomp <- traincomp %>%
mutate(across(c(train.response, train.prediction), factor))
heart.roc <- roc(response = ordered(traincomp$train.response), predictor =ordered(traincomp$train.prediction))
plot(heart.roc, print.thres = "best", main = "Receiver Operating Characteristic Technique Plot")
# AUC calculation
print(auc(heart.roc))
set.seed(470)
folds <- vfold_cv(heart.train, v = 5)
heart_fit_rs <- heart_wflow %>%
fit_resamples(folds)
metrics <- data.frame(collect_metrics(heart_fit_rs, summarize = FALSE))
metrics <- metrics %>%
select(-.config)
colnames(metrics) <- c("Fold", "Metric", "Estimator", "Estimate")
metrics
heart_disease_pred <- predict(heart_fit, new_data = heart.test) %>%
bind_cols(heart.test %>% select(heart_disease))
# Evaluate model on testing data
test_accuracy <- accuracy(heart_disease_pred, truth = heart_disease, estimate = .pred_class)
test_specificity <- spec(heart_disease_pred, truth = heart_disease, estimate = .pred_class)
test_sensitivity <- sens(heart_disease_pred, truth = heart_disease, estimate = .pred_class)
test.values <- data.frame(test_accuracy$.estimate, test_sensitivity$.estimate, test_specificity$.estimate)
colnames(test.values) <- c("Test set Accuracy", "Test set Sensitivity", "Test set Specificity")
test.values
